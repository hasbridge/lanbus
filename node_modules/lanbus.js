/**
 * LANBUS main application
 *
 * Contains both server and client application code
 */

var net = require('net');

module.exports = (function(){
    var lanbus = {};

    var defaults = {
        host: '127.0.0.1',
        port: 8124,
        maxConnections: 20,
        retryTime: 2000
    };

    var parseOptions = function(options) {
        var merged = defaults;
        for (var attr in options) {
            if (typeof(options[attr]) !== 'undefined') {
                merged[attr] = options[attr];
            }
        }
        return merged;
    }

    lanbus.server = (function(){
        var that = {};
        var sockets = [];

        // Server code
        that.start = function(options) {
            options = parseOptions(options);

            lanbus.log('LANBUS server starting...');

            // Configure server
            var server = net.createServer(function (socket) {
                // Client connected

                sockets.push(socket);
                socket.clientIp = socket.remoteAddress;
                lanbus.log('client connected from ' + socket.clientIp);

                // Client disconnected
                socket.on('end', function () {
                    lanbus.log('client ' + socket.clientIp + ' disconnected');
                    var idx = sockets.indexOf(socket);
                    if (idx != -1) {
                        delete sockets[idx];
                    }
                });

                // Data received from a connected client
                socket.on('data', function (data) {
                    var command = data.toString().trim();
                    lanbus.log('Command from ' + socket.remoteAddress + ': ' + command);

                    // Forward command to all connected clients except the sender
                    sockets.forEach(function (client) {
                        if (client != socket) {
                            lanbus.log('Sending command to ' + client.remoteAddress);
                            client.write(command + "\r\n");
                        }

                    });
                });
            });

            // Set max connection limit
            server.maxConnections = options.maxConnections;

            // Listen for connections
            server.listen(options.port, function () { //'listening' listener
                lanbus.log('Listening on port ' + options.port);
            });
        };

        return that;
    })();

    // Client code
    lanbus.client = (function(){
        var that = {};
        
        that.start = function(commands, options) {
            options = parseOptions(options);
            var client = new net.Socket();

            // On connect error, retry
            client.on('error', function(e){
                console.log('Unable to connect, retrying...');
                setTimeout(that.start, options.retryTime);
            });

            // Connect to host
            client.connect(options.port, options.host, function () {
                console.log('Connected to ' + options.host + ':' + options.port);
            });

            // Data received, run command if found
            client.on('data', function (data) {
                var msg = data.toString().trim();
                var parts = msg.split(':');
                var command = parts.shift();
                var arg = parts.join(':');

                console.log('Received command [' + command + '] with arg [' + arg + ']');

                if (typeof(commands[command]) != 'undefined') {
                    commands[command](arg);
                } else {
                    console.log('Unknown command');
                }
            });

            // Lost connection to host, attempt to reconnect
            client.on('end', function () {
                console.log('Connection lost, retrying...');
                setTimeout(that.start, opts.retryTime);

            });

        };

        return that;
    })();

    // Custom logger to include timestamp
    lanbus.log = function(message) {
        console.log('[' + new Date().toISOString() + '] ' + message);
    };

    return lanbus;
})();