/**
 * LANBUS main application
 *
 * Contains both server and client application code
 */

var net = require('net');

module.exports = (function(){
    var lanbus = {};

    // Merge options array with defaults
    var parseOptions = function(options, defaults) {
        var merged = defaults;
        for (var attr in options) {
            if (typeof(options[attr]) !== 'undefined') {
                merged[attr] = options[attr];
            }
        }
        return merged;
    }

    // Server code
    lanbus.server = (function(){
        var that = {};
        var sockets = [];
        var defaults = {
            port: 8124,
            maxConnections: 20
        };

        // Server code
        that.start = function(options) {
            options = parseOptions(options, defaults);

            lanbus.log('LANBUS server starting...');

            // Configure server
            var server = net.createServer(function (socket) {
                // Client connected

                sockets.push(socket);
                socket.clientIp = socket.remoteAddress;
                lanbus.log('client connected from ' + socket.clientIp);

                // Client disconnected
                socket.on('end', function () {
                    lanbus.log('client ' + socket.clientIp + ' disconnected');
                    var idx = sockets.indexOf(socket);
                    if (idx != -1) {
                        delete sockets[idx];
                    }
                });

                // Data received from a connected client
                socket.on('data', function (data) {
                    var message = data.toString().trim();
                    lanbus.log('Message from ' + socket.remoteAddress + ': ' + message);

                    // Forward message to all connected clients except the sender
                    sockets.forEach(function (client) {
                        if (client != socket) {
                            lanbus.log('Forwarding message to ' + client.remoteAddress);
                            client.write(message + "\r\n");
                        }

                    });
                });
            });

            // Set max connection limit
            server.maxConnections = options.maxConnections;

            // Listen for connections
            server.listen(options.port, function () { //'listening' listener
                lanbus.log('Listening on port ' + options.port);
            });
        };

        return that;
    })();

    // Client code
    lanbus.client = (function(){
        var that = {};
        var socket;
        var disconnecting = false;
        var handlers = {};
        var defaults = {
            host: '127.0.0.1',
            port: 8124,
            retryTime: 2000
        };
        
        that.start = function(options, callback) {
            options = parseOptions(options, defaults);
            socket = new net.Socket();

            // On connect error, retry
            socket.on('error', function(e){
                lanbus.log('Unable to connect, retrying...');
                setTimeout(function() {
                    that.start(options);
                }, options.retryTime);
            });

            // Connect to host
            socket.connect(options.port, options.host, function () {
                lanbus.log('Connected to ' + options.host + ':' + options.port);
                if (typeof(callback) != 'undefined') {
                    callback();
                }
            });

            // Data received, run command if found
            socket.on('data', function (data) {
                var msg = data.toString().trim();
		var parts = msg.split(':');
		var event = parts.shift();
		var params = parts.join(':');

                lanbus.log('Message: ' + msg);

                if (typeof(handlers[event]) != 'undefined') {
                    handlers[event].forEach(function(handler){
                        lanbus.log('Executing event handler');
                        handler(params);
                    });
                }
            });

            // Lost connection to host, attempt to reconnect
            socket.on('end', function () {
                if (!disconnecting) {
                    lanbus.log('Connection lost, retrying...');
                    setTimeout(function(){
                        that.start(options);
                    }, options.retryTime);
                }
            });

        };

        that.emit = function(event, params, callback) {
            var message = event + ':' + params;
            lanbus.log("Sending: " + message);
            socket.write(message);
            return that;
        };

        that.attach = function(event, callback) {
            if (typeof(handlers[event]) == 'undefined') {
                handlers[event] = [];
            }
            handlers[event].push(callback);
            return that;
        };

        that.end = function() {
            lanbus.log('Disconnecting');
            disconnecting = true;
            socket.end();
            return that;
        };

        return that;
    })();

    // Custom logger to include timestamp
    lanbus.log = function(message) {
        console.log('[' + new Date().toISOString() + '] ' + message);
    };

    return lanbus;
})();
